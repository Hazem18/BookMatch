@model Models.Match

@{
    ViewData["Title"] = "Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@if (TempData["NotAllowed"] != null)
{
    <div id="NotAllowedtoast" class="toastred">
        <strong>@TempData["NotAllowed"]</strong>
    </div>
}
@if (TempData["success"] != null)
{
    <div id="successToast" class="toast">
        <strong>@TempData["success"]</strong>
    </div>
}
@if (TempData["bought"] != null)
{
    <div id="boughtToast" class="toastorange">
        <h1>@TempData["bought"]</h1>
    </div>
}

<div class="details-container">
    <h1 class="details-title">Match Details</h1>

    <div class="details-card">
        <h4>Match Information</h4>
        <hr />
        <dl class="row">
            <dt class="col-sm-3">@Html.DisplayNameFor(model => model.DateTime)</dt>
            <dd class="col-sm-9">@Html.DisplayFor(model => model.DateTime)</dd>

            <dt class="col-sm-3">Stadium</dt>
            <dd class="col-sm-9">@Html.DisplayFor(model => model.Stadium.Name)</dd>

            <dt class="col-sm-3">Team Home</dt>
            <dd class="col-sm-9">@Html.DisplayFor(model => model.TeamA.Name)</dd>

            <dt class="col-sm-3">Team Away</dt>
            <dd class="col-sm-9">@Html.DisplayFor(model => model.TeamB.Name)</dd>

            <dt class="col-sm-3">League</dt>
            <dd class="col-sm-9">@Html.DisplayFor(model => model.League.Name)</dd>
        </dl>
    </div>

    <form asp-action="Details" method="post" class="match-form">
        <input type="hidden" asp-for="Id" />

        <div class="form-section">
            <div class="image-section">
                <img id="category-image" src="@Url.Content("~/LogoUrl/Ticket/fullStadium.png")" alt="Stadium View" class="stadium-image" />
            </div>

            <div class="dropdown-section">
                <select id="select-category" name="ticketCategoryId" class="form-control custom-select" tabindex="1">
                    <option value="">Select a category...</option>
                    @foreach (var item in ViewBag.TicketCategories)
                    {
                        <option value="@item.Id"
                                data-name="@item.Name"
                                data-available-tickets="@item.AvailableTickets"
                                data-sector-image="@Url.Content("~/LogoUrl/Ticket/" + item.SectorImage)">
                            @item.Name
                        </option>
                    }
                </select>

                <select id="select-seat" name="seatNumber" class="form-control custom-select" tabindex="2">
                    <option value="">Select a seat...</option>
                </select>

                <div asp-validation-summary="ModelOnly" class="text-danger validation-summary"></div>
            </div>
        </div>

        <button type="submit" class="btn-ticket">Book Match Ticket</button>
    </form>

    <div class="back-link">
        <a asp-action="Index">Back</a>
    </div>
</div>

<style>
    body {
        background-color: #f0f5f0;
        font-family: 'Arial', sans-serif;
    }

    .details-container {
        max-width: 900px;
        margin: 20px auto;
        padding: 20px;
        background: linear-gradient(135deg, #1e7e34, #28a745);
        color: #fff;
        border-radius: 10px;
        box-shadow: 0 4px 15px rgba(0, 128, 0, 0.3);
    }

    .details-title {
        text-align: center;
        margin-bottom: 20px;
        font-size: 2rem;
        font-weight: bold;
        color: #ffeb3b;
    }

    .alert-box {
        text-align: center;
        padding: 10px;
        margin: 20px auto;
        border-radius: 5px;
        width: fit-content;
    }

    .alert-danger {
        background-color: red;
        color: white;
    }

    .alert-success {
        background-color: green;
        color: white;
    }

    .alert-info {
        background-color: blue;
        color: white;
    }

    .details-card {
        background-color: rgba(255, 255, 255, 0.1);
        padding: 15px;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
    }

    .row {
        margin-bottom: 10px;
    }

    .stadium-image {
        width: 100%;
        height: auto;
        border-radius: 10px;
        border: 2px solid #fff;
    }

    .form-section {
        display: flex;
        justify-content: space-between;
        margin-top: 20px;
    }

    .dropdown-section {
        flex: 1;
        margin-left: 20px;
    }

    .custom-select {
        margin-bottom: 10px;
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 5px;
    }

    .btn-ticket {
        display: inline-block;
        margin-top: 20px;
        background: #ffc107;
        color: #000;
        border: none;
        padding: 10px 20px;
        font-size: 1rem;
        border-radius: 5px;
        font-weight: bold;
        transition: all 0.3s ease;
    }

        .btn-ticket:hover {
            background: #ffd454;
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(255, 193, 7, 0.4);
        }

    .back-link a {
        color: #ffc107;
        text-decoration: none;
        font-weight: bold;
    }

        .back-link a:hover {
            text-decoration: underline;
        }

    .option.disabled {
        color: #ccc;
        pointer-events: none;
    }
</style>

<script>
    // Debugging: Ensure booked seats data is loaded
    const bookedSeats = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.BookedSeats ?? new List<string>()));
    console.log("Booked Seats:", bookedSeats);

    // Initialize Tom Select for category and seat dropdowns
    const categorySelect = new TomSelect("#select-category", {
        create: false,
        sortField: { field: "text", direction: "asc" },
        maxOptions: false
    });

    const seatSelect = new TomSelect("#select-seat", {
        create: false,
        sortField: { field: "number", direction: "asc" },
        maxOptions: false
    });

    // Event listener for category change
    document.getElementById('select-category').addEventListener('change', function () {
        const selectedOption = this.options[this.selectedIndex];
        const availableTickets = selectedOption.getAttribute('data-available-tickets');
        const categoryName = selectedOption.getAttribute('data-name');
        const sectorImage = selectedOption.getAttribute('data-sector-image');

        console.log("Selected Category Name:", categoryName);
        console.log("Available Tickets:", availableTickets);

        // Update category image
        const categoryImage = document.getElementById('category-image');
        categoryImage.src = sectorImage || '@Url.Content("~/LogoUrl/Ticket/fullStadium.png")';

        // Clear and populate seat dropdown
        const seatDropdown = document.getElementById('select-seat');
        seatDropdown.innerHTML = '';  // Reset dropdown

        // Reset the seat select dropdown (clear selection)
        seatSelect.clear();

        if (availableTickets && parseInt(availableTickets) > 0) {
            for (let i = 1; i <= parseInt(availableTickets); i++) {
                const seatNumber = `${categoryName}-${i}`;
                const option = document.createElement('option');
                option.value = seatNumber;
                option.textContent = seatNumber;

                // Check if the seat is booked
                if (bookedSeats.includes(seatNumber)) {
                    option.disabled = true; // Mark as disabled
                }

                seatDropdown.appendChild(option);
            }
        } else {
            const option = document.createElement('option');
            option.value = '';
            option.textContent = 'No seats available';
            seatDropdown.appendChild(option);
        }

        // Refresh Tom Select dropdown
        seatSelect.clearOptions();
        Array.from(seatDropdown.options).forEach((opt) => {
            seatSelect.addOption({
                value: opt.value,
                text: opt.textContent,
                disabled: opt.disabled
            });
        });
        seatSelect.refreshOptions();
    });

    // Trigger category change event on page load
    document.addEventListener('DOMContentLoaded', function () {
        document.getElementById('select-category').dispatchEvent(new Event('change'));
    });

    // Event listener for seat change to focus on the submit button
    document.getElementById('select-seat').addEventListener('change', function () {
        const submitButton = document.querySelector('.btn-ticket'); // Select the submit button

        // Focus on the submit button when a seat is selected
        if (this.value) {
            submitButton.focus();
        }
    });
</script>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function () {
            // Select all toast elements correctly
            var toasts = $("#successToast, #NotAllowedtoast, #boughtToast");

            // Iterate over each toast element
            toasts.each(function(index, toast) {
                $(toast).fadeIn(300).delay(3000 + (index * 1000)).fadeOut(500);  // Stagger the fadeOut slightly
            });
        });
    </script>
}



<style>
    .toast {
        position: fixed;
        top: 1rem; /* Set to 1rem from the top */
        left: 50%; /* Position it at the center */
        transform: translateX(-50%); /* Adjust for perfect centering */
        z-index: 1050;
        background-color: #28a745; /* Green background */
        color: white;
        padding: 1rem;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        display: none; /* Initially hidden */
    }

    .toastred {
        position: fixed;
        top: 1rem; /* Set to 1rem from the top */
        left: 50%; /* Position it at the center */
        transform: translateX(-50%); /* Adjust for perfect centering */
        z-index: 1050;
        background-color: red; /* red background */
        color: white;
        padding: 1rem;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        display: none; /* Initially hidden */
    }

    .toastorange {
        position: fixed;
        top: 1rem; /* Set to 1rem from the top */
        left: 50%; /* Position it at the center */
        transform: translateX(-50%); /* Adjust for perfect centering */
        z-index: 1050;
        background-color: orange; /* orange background */
        color: white;
        padding: 1rem;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        display: none; /* Initially hidden */
    }

</style>